<?xml version="1.0"?>

<!--
  This version of checkstyle is based on the Giraph
  checkstyle configurations.  It is a best effort attempt to try to match
  the CODE_CONVENTIONS and Oracle "Code Conventions for the Java
  Programming Language".  See the following link:

  http://www.oracle.com/technetwork/java/codeconvtoc-136057.html

  The documentation for checkstyle is available at

  http://checkstyle.sourceforge.net
-->

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="checker">
    <property name="localeLanguage" value="en"/>

    <!-- Checks for the correct license header in *.java files -->
    <module name="Header">
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <property name="fileExtensions" value="java"/>
    </module>

    <!-- Checks for Javadoc comments (checker).           -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <!-- Require package javadoc -->
    <module name="JavadocPackage"/>

    <!-- Miscellaneous other checks (checker).         -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <!-- Require files to end with newline characters -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf" />
    </module>

    <!-- Checks for whitespace (tree walker)                 -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <!-- No tabs allowed! -->
    <module name="FileTabCharacter"/>

    <module name="TreeWalker">
        <property name="cacheFile" value="target/checkstyle-cachefile"/>

        <!-- Checks for blocks. -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!-- No empty blocks (i.e. catch) -->
        <module name="EmptyBlock"/>
        <!-- No if/else/do/for/while without braces -->
        <module name="NeedBraces"/>
        <!-- Checks for the placement of left curly braces for code blocks -->
        <module name="LeftCurly"/>
        <!-- Checks for the placement of right curly braces for code blocks -->
        <module name="RightCurly"/>
        <!-- as the name says -->
        <module name="AvoidNestedBlocks"/>

        <!-- Checks for class design                         -->
        <!-- Interfaces must be types (not just constants) -->
        <module name="InterfaceIsType"/>
        <!-- No public fields -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
            <property name="publicMemberPattern" value="^$"/>
        </module>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement"/>

        <!-- Require hash code override when equals is -->
        <module name="EqualsHashCode"/>

        <!-- Method parameters and local variables should not hide
         fields, except in constructors and setters -->
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>

        <!-- Disallow unnecessary instantiation of Boolean, String -->
        <module name="IllegalInstantiation">
            <property name="classes"
                      value="java.lang.Boolean, java.lang.String"/>
        </module>
        <!-- Checks for assignments in subexpressions -->
        <module name="InnerAssignment"/>
        <!-- Switch statements should be complete and with independent cases -->
        <module name="FallThrough"/>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <!-- Only one statment per line allowed -->
        <module name="OneStatementPerLine"/>
        <!-- Use a consistent way to put declarations -->
        <module name="DeclarationOrder"/>
        <!-- Don't add up parentheses when they are not required -->
        <module name="UnnecessaryParentheses"/>
        <!-- Don't use too widespread catch (Exception, Throwable,
         RuntimeException) -->
        <module name="IllegalCatch"/>
        <!-- Don't use = or != for string comparisons -->
        <module name="StringLiteralEquality"/>
        <!-- Don't declare multiple variables in the same statement -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="RedundantImport"/>
        <!-- Import should be explicit, really needed and only from pure
         java packages -->
        <module name="AvoidStarImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>
        <module name="IllegalImport"/>

        <!-- Checks for Javadoc comments (tree walker).       -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!-- Javadoc must be formatted correctly -->
        <module name="JavadocStyle">
            <property name="checkFirstSentence" value="false"/>
        </module>
        <!-- Must have class / interface header comments -->
        <module name="JavadocType"/>
        <!-- Require method javadocs, allow undeclared RTE, allow missing
         javadoc on getters and setters  -->
        <module name="JavadocMethod">
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        <!-- Require field javadoc -->
        <module name="JavadocVariable"/>
        <!-- Miscellaneous other checks (tree walker).     -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <!-- Java style arrays -->
        <module name="ArrayTypeStyle"/>
        <!-- Indentation -->
        <module name="Indentation">
            <property name="caseIndent" value="0"/>
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="0"/>
            <property name="lineWrappingIndentation" value="0"/>
        </module>
        <module name="UpperEll"/>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <!-- Use a consistent way to put modifiers -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!-- Constant names should obey the traditional all uppercase
         naming convention -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName">
            <property name="format" value="^[A-Z0-9_]*$"/>
        </module>
        <module name="TypeName"/>

        <!-- Checks for regexp expressions.                  -->
        <!-- See http://checkstyle.sf.net/config_regexp.html -->
        <!-- No trailing whitespace -->
        <module name="Regexp">
            <property name="format" value="[ \t]+$"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Trailing whitespace"/>
        </module>
        <!-- No System.out.println() statements -->
        <!--<module name="Regexp">-->
            <!--&lt;!&ndash; No sysouts &ndash;&gt;-->
            <!--<property name="format" value="System\.out\.println"/>-->
            <!--<property name="illegalPattern" value="true"/>-->
        <!--</module>-->
        <!-- Authors should be in pom.xml file -->
        <module name="Regexp">
            <property name="format" value="@author"/>
            <property name="illegalPattern" value="true"/>
            <property name="message"
                      value="developers names should be in pom file"/>
        </module>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!-- Lines cannot exceed 80 chars -->
        <module name="LineLength">
            <property name="max" value="80"/>
            <property name="ignorePattern" value="^[import|package]|@see|@link"/>
        </module>
        <!-- Over time, we will revised this down -->
        <module name="MethodLength">
            <property name="max" value="200"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="10"/>
        </module>

        <!-- Checks for whitespace (tree walker)                 -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <!-- Spacing around methods -->
        <module name="MethodParamPad">
            <property name="option" value="nospace"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <!-- No whitespace before a token -->
        <module name="NoWhitespaceBefore"/>
        <!-- Whitespace after tokens is required -->
        <module name="WhitespaceAfter"/>
        <!-- Whitespace around tokens is required -->
        <module name="WhitespaceAround"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <!-- No extra whitespace around types -->
        <module name="GenericWhitespace"/>
        <!-- Operator must be at end of wrapped line -->
        <module name="OperatorWrap">
            <property name="option" value="eol"/>
        </module>
    </module>
</module>