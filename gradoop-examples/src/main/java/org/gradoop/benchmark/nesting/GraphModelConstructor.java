/*
 * This file is part of Gradoop.
 *
 * Gradoop is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gradoop is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gradoop. If not, see <http://www.gnu.org/licenses/>.
 */

package org.gradoop.benchmark.nesting;

import com.sun.istack.Nullable;
import org.apache.flink.api.java.DataSet;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.java.tuple.Tuple3;
import org.gradoop.benchmark.nesting.functions.AssociateNewGraphHead;
import org.gradoop.benchmark.nesting.functions.ExtractVerticesFromEdges;
import org.gradoop.benchmark.nesting.functions.ImportVertexId;
import org.gradoop.benchmark.nesting.functions.TripleSplit;
import org.gradoop.benchmark.nesting.parsers.ParametricInputFormat;
import org.gradoop.common.model.impl.id.GradoopId;
import org.gradoop.common.model.impl.pojo.GraphHead;
import org.gradoop.common.model.impl.pojo.GraphHeadFactory;
import org.gradoop.flink.io.impl.graph.tuples.ImportEdge;
import org.gradoop.flink.io.impl.graph.tuples.ImportVertex;
import org.gradoop.flink.model.impl.functions.epgm.Id;
import org.gradoop.flink.model.impl.functions.tuple.Value2Of3;

import static org.apache.flink.api.java.ExecutionEnvironment.getExecutionEnvironment;

/**
 * Class loading graph generated by the gMark generator, one step at a time
 */
public class GraphModelConstructor {

  /**
   * Information from all the headers from the graph
   *
   * f0: source
   * f1: if it is a search graph or not
   * f2: graph head that is associated to the final graph
   */
  private DataSet<Tuple3<String, Boolean, GraphHead>> allHeadInfos;

  /**
   * Associating each vertex to the graph id
   */
  private DataSet<Tuple2<ImportVertex<String>, GradoopId>> allVertices;

  /**
   * Associating each edge to the graph id
   */
  private DataSet<Tuple2<ImportEdge<String>, GradoopId>> allEdges;

  /**
   * Default constructor
   * @param allHeadInfos  Graph head information
   * @param allVertices   Loaded vertices information
   * @param allEdges      Loaded edges information
   */
  public GraphModelConstructor(DataSet<Tuple3<String, Boolean, GraphHead>> allHeadInfos,
    DataSet<Tuple2<ImportVertex<String>, GradoopId>> allVertices,
    DataSet<Tuple2<ImportEdge<String>, GradoopId>> allEdges) {
    this.allHeadInfos = allHeadInfos;
    this.allEdges = allEdges;
    this.allVertices = allVertices;
  }

  /**
   * Adds another graph to the collection that already represents a graph
   * @param lhr   External graph information to be brought to this graph
   */
  public void incrementalUpdateWith(GraphModelConstructor lhr) {
    if (lhr != null) {
      this.allHeadInfos = this.allHeadInfos.union(lhr.allHeadInfos);
      this.allEdges = this.allEdges.union(lhr.allEdges);
      this.allVertices = this.allVertices.union(lhr.allVertices);
    }
  }

  /**
   * Loads the graphs in gMark edge format
   * @param edgeFile  Edge file format
   * @param hFac      Default GraphHead factory
   * @return          Loaded graph information
   */
  public static GraphModelConstructor createGraphInformation(String edgeFile, GraphHeadFactory hFac) {
    return createGraphInformationWithVertices(edgeFile, null, hFac);
  }

  /**
   *
   * @param edgePath      File containing the edges in the gMark txt format
   * @param vertexPath    Set of vertices, where each vertex is stored in a different line
   * @param hFac          Default GraphHead factory
   * @return              Loaded graph information
   */
  public static GraphModelConstructor createGraphInformationWithVertices(String edgePath,
    @Nullable String vertexPath, GraphHeadFactory hFac) {
    ParametricInputFormat pif = ParametricInputFormat.getInstance();

    // Definition of the head associated to the graph that will be the search graph
    DataSet<Tuple3<String, Boolean, GraphHead>> graphHead =
      getExecutionEnvironment().fromElements(edgePath)
        .map(new AssociateNewGraphHead(hFac, false));

    // Mapping the graph as a graph index
    DataSet<GradoopId> graphId = graphHead
      .map(new Value2Of3<>())
      .map(new Id<>());

    // Associating each edge to a graph
    DataSet<Tuple2<ImportEdge<String>, GradoopId>> edgesBelongToGraph =
      getExecutionEnvironment().readFile(pif, edgePath)
        .flatMap(new TripleSplit())
        .crossWithTiny(graphId);

    // Loading the vertices optionally from a separate file (vertices not having an edge)
    DataSet<Tuple2<ImportVertex<String>, GradoopId>> allVertices = null;
    if (vertexPath != null) {
      allVertices = getExecutionEnvironment().readFile(pif, vertexPath)
          .map(new ImportVertexId<>())
          .cross(graphId);
    }

    // Associating each vertex to a graph
    DataSet<Tuple2<ImportVertex<String>,GradoopId>> verticesBelongToGraph = edgesBelongToGraph
      .flatMap(new ExtractVerticesFromEdges<>())
      .distinct(new ImportVertexId<>());

    if (allVertices != null) {
      verticesBelongToGraph = verticesBelongToGraph
        .union(allVertices)
        .distinct(new ImportVertexId<>());
    }

    return new GraphModelConstructor(graphHead, verticesBelongToGraph, edgesBelongToGraph);
  }

  /**
   * Returns…
   * @return  The complete GraphHead information
   */
  public DataSet<Tuple3<String, Boolean, GraphHead>> getAllHeadInfos() {
    return allHeadInfos;
  }

  /**
   * Returns…
   * @return  The complete vertex information
   */
  public DataSet<Tuple2<ImportVertex<String>, GradoopId>> getAllVertices() {
    return allVertices;
  }

  /**
   * Returns…
   * @return  The complete edge information
   */
  public DataSet<Tuple2<ImportEdge<String>, GradoopId>> getAllEdges() {
    return allEdges;
  }
}
