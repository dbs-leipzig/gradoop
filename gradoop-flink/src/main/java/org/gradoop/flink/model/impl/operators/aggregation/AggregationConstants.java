/*
 * Copyright Â© 2014 - 2018 Leipzig University (Database Research Group)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradoop.flink.model.impl.operators.aggregation;

import org.gradoop.flink.model.impl.operators.aggregation.functions.containment.HasEdgeLabel;
import org.gradoop.flink.model.impl.operators.aggregation.functions.containment.HasVertexLabel;
import org.gradoop.flink.model.impl.operators.aggregation.functions.count.EdgeCount;
import org.gradoop.flink.model.impl.operators.aggregation.functions.count.VertexCount;
import org.gradoop.flink.model.impl.operators.aggregation.functions.max.MaxProperty;
import org.gradoop.flink.model.impl.operators.aggregation.functions.min.MinProperty;
import org.gradoop.flink.model.impl.operators.aggregation.functions.sum.SumProperty;

/**
 * Collected constants for aggregation operator
 */
public final class AggregationConstants {
  /**
   * Key of the property generated by {@link EdgeCount} aggregate function.
   */
  public static final String PROPERTY_KEY_EDGE_COUNT = "edgeCount";

  /**
   * Key of the property generated by {@link VertexCount} aggregate function.
   */
  public static final String PROPERTY_KEY_VERTEX_COUNT = "vertexCount";

  /**
   * Prefix of the property key generated by {@link HasEdgeLabel} aggregate function.
   * Name of the label is concatenated to the prefix.
   */
  public static final String PROPERTY_KEY_PREFIX_HAS_EDGE_LABEL = "hasEdgeLabel_";

  /**
   * Prefix of the property key generated by {@link HasVertexLabel} aggregate function.
   * Name of the label is concatenated to the prefix.
   */
  public static final String PROPERTY_KEY_PREFIX_HAS_VERTEX_LABEL = "hasVertexLabel_";

  /**
   * Prefix of the property key generated by {@link MaxProperty} aggregate function.
   * Key of the aggregated property is concatenated to the prefix.
   */
  public static final String PROPERTY_KEY_PREFIX_MAX = "max_";

  /**
   * Prefix of the property key generated by {@link MinProperty} aggregate function.
   * Key of the aggregated property is concatenated to the prefix.
   */
  public static final String PROPERTY_KEY_PREFIX_MIN = "min_";

  /**
   * Prefix of the property key generated by {@link SumProperty} aggregate function.
   * Key of the aggregated property is concatenated to the prefix.
   */
  public static final String PROPERTY_KEY_PREFIX_SUM = "sum_";

  /**
   The caller references the constants using <tt>AggregationConstants.PROPERTY_KEY_EDGE_COUNT</tt>,
   and so on. Thus, the caller should be prevented from constructing objects of
   this class, by declaring this private constructor.
   */
  private AggregationConstants() {
    // this prevents even the native class from calling this constructor
    throw new AssertionError();
  }
}
