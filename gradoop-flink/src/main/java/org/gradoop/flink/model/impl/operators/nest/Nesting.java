/*
 * This file is part of Gradoop.
 *
 * Gradoop is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gradoop is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gradoop. If not, see <http://www.gnu.org/licenses/>.
 */

package org.gradoop.flink.model.impl.operators.nest;

import org.apache.flink.api.java.DataSet;
import org.gradoop.common.model.impl.id.GradoopId;
import org.gradoop.common.model.impl.pojo.GraphHeadFactory;
import org.gradoop.flink.model.api.operators.GraphGraphCollectionToGraph;
import org.gradoop.flink.model.impl.GraphCollection;
import org.gradoop.flink.model.impl.LogicalGraph;
import org.gradoop.flink.model.impl.operators.nest.operators.NestingWithNestedModel;
import org.gradoop.flink.model.impl.operators.nest.tuples.Hexaplet;
import org.gradoop.flink.model.impl.operators.nest.model.NormalizedGraph;
import org.gradoop.flink.model.impl.operators.nest.model.VertexCentricResult;
import org.gradoop.flink.model.impl.operators.nest.model.indices.IndexingBeforeNesting;
import org.gradoop.flink.model.impl.operators.nest.model.indices.NestedIndexing;
import org.gradoop.flink.model.impl.operators.nest.transformations
  .EPGMToNestedIndexingTransformation;
import org.gradoop.flink.model.impl.operators.nest.transformations
  .NestedIndexingToEPGMTransformations;

/**
 * Implements the nesting operator for the EPGM data model. Given a graph describing the groundtruth
 * information and a collection of graph representing the mined patterns, it returns a nested graph
 * where each vertex is either a vertex representing a graph in the graph collection that contains
 * at least one match with the ground truth or a non-matcher vertex. The edges from the former
 * graph are also inherited.
 */
public class Nesting implements GraphGraphCollectionToGraph, VertexCentricResult<DataSet<Hexaplet>> {

  /**
   * The actual id to be associated to the returned graph
   */
  private final GradoopId n;

  /**
   * Using the FlatModel if we have a chain of different operations to be optimized
   */
  private NormalizedGraph fm;

  /**
   * Left index mapping
   */
  private NestedIndexing leftIdx;

  /**
   * Right index mapping
   */
  private NestedIndexing rightIdx;

  /**
   * Intermediate indexing result
   */
  private IndexingBeforeNesting intermediateResult;

  /**
   * Setting the outcome of the previous computation
   */
  private DataSet<Hexaplet> previousComputation;

  /**
   * A default id is generated by using the GraphHeadFactory
   * @param ghf Generating the ids for the headers
   */
  public Nesting(GraphHeadFactory ghf) {
    this(ghf.createGraphHead().getId());
  }

  /**
   * A default id is associated to the graph
   * @param id Id to be associated to the new graph
   */
  public Nesting(GradoopId id) {
    this.n = id;
    this.fm = null;
    this.previousComputation = null;
  }

  @Override
  public String getName() {
    return getClass().getName();
  }

  /**
   * Default internal initialization for the operator
   * @param left        Graph to be nested
   * @param collection  Nesting information
   */
  protected void initialize(LogicalGraph left, GraphCollection collection) {

    // Generating the model only if it is required
    if (fm == null) {
      /*
     * Creating the flat model containing the information of everything that happens, from the
     * left operand to the graph collection
     */
      GraphCollection groundTruth = GraphCollection.fromDataSets(
        left.getGraphHead().union(collection.getGraphHeads()),
        left.getVertices().union(collection.getVertices()),
        left.getEdges().union(collection.getEdges()),
        left.getConfig());

      // Getting the model for defining the associated model
      fm = new NormalizedGraph(groundTruth);
    }

    // Suppose that both operands must share the same execution environment
    NestingWithNestedModel operator = new NestingWithNestedModel();

    // Extracting the indexing structures for both graphs
    leftIdx = EPGMToNestedIndexingTransformation.fromLogicalGraph(left);
    rightIdx = EPGMToNestedIndexingTransformation.fromGraphCollection(collection);

    // At this step the FlatModel is never used, since I only change the index representation
    intermediateResult = operator.with(leftIdx, rightIdx);
    previousComputation = intermediateResult.getPreviousComputation();
  }

  /**
   * Returns…
   *
   * @return the intermediate indexing result, that could be used a next time for
   * updating the edges
   */
  public IndexingBeforeNesting getIntermediateResult() {
    return intermediateResult;
  }

  /**
   * Returns…
   * @return  the indexing for the nesting interface
   */
  public NestedIndexing getRightIdx() {
    return rightIdx;
  }

  /**
   * Returns…
   * @return  the id to be associated to the resulting graph
   */
  public GradoopId getId() {
    return n;
  }

  /**
   * Returns…
   * @return the normalized graph containing the information for the whole graphs
   * within the graph
   */
  public NormalizedGraph getNormalizedRepresentation() {
    return fm;
  }

  @Override
  public LogicalGraph execute(LogicalGraph left, GraphCollection collection) {
    initialize(left, collection);

    // Converting the result to the standard EPGM model
    return NestedIndexingToEPGMTransformations.toLogicalGraph(intermediateResult, fm);
  }

  @Override
  public DataSet<Hexaplet> getPreviousComputation() {
    return previousComputation;
  }
}
