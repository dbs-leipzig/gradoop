/*
 * This file is part of Gradoop.
 *
 * Gradoop is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gradoop is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gradoop. If not, see <http://www.gnu.org/licenses/>.
 */

package org.gradoop.flink.model.impl.operators.nest2;

import org.apache.flink.api.java.DataSet;
import org.gradoop.common.model.impl.id.GradoopId;
import org.gradoop.common.model.impl.pojo.GraphHeadFactory;
import org.gradoop.flink.model.api.operators.GraphGraphCollectionToGraph;
import org.gradoop.flink.model.impl.GraphCollection;
import org.gradoop.flink.model.impl.LogicalGraph;
import org.gradoop.flink.model.impl.operators.nest.tuples.Hexaplet;
import org.gradoop.flink.model.impl.operators.nest2.model.FlatModel;
import org.gradoop.flink.model.impl.operators.nest2.model.VertexCentricResult;
import org.gradoop.flink.model.impl.operators.nest2.model.indices.IndexingForNesting;
import org.gradoop.flink.model.impl.operators.nest2.model.indices.NestedIndexing;
import org.gradoop.flink.model.impl.operators.nest.transformations
  .EPGMToNestedIndexingTransformation;
import org.gradoop.flink.model.impl.operators.nest2.operator.Nesting;
import org.gradoop.flink.model.impl.operators.nest2.transformations
  .NestedIndexingToEPGMTransformations;

/**
 * Implements the nesting operator for the EPGM data model
 */
public class Nest implements GraphGraphCollectionToGraph, VertexCentricResult<DataSet<Hexaplet>> {

  /**
   * The actual id to be associated to the returned graph
   */
  private final GradoopId n;

  /**
   * Using the FlatModel if we have a chain of different operations to be optimized
   */
  private FlatModel fm;

  /**
   * Setting the outcome of the previous computation
   */
  private DataSet<Hexaplet> previousComputation;

  /**
   * A default id is generated by using the GraphHeadFactory
   * @param ghf Generating the ids for the headers
   */
  public Nest(GraphHeadFactory ghf) {
    this.n = ghf.createGraphHead().getId();
    this.fm = null;
    this.previousComputation = null;
  }

  /**
   * Default constructor. A default id is associated to the graph
   */
  public Nest(GradoopId id) {
    this.n = id;
  }

  @Override
  public String getName() {
    return getClass().getName();
  }

  @Override
  public LogicalGraph execute(LogicalGraph left, GraphCollection collection) {

    // Generating the model only if it is required
    if (fm == null) {
      /*
     * Creating the flat model containing the information of everything that happens, from the
     * left operand to the graph collection
     */
      GraphCollection groundTruth = GraphCollection.fromDataSets(
        left.getGraphHead().union(collection.getGraphHeads()),
        left.getVertices().union(collection.getVertices()),
        left.getEdges().union(collection.getEdges()),
        left.getConfig());

      // Getting the model for defining the associated model
      fm = new FlatModel(groundTruth);
    }

    // Suppose that both operands must share the same execution environment
    Nesting operator = new Nesting(n,left.getConfig().getExecutionEnvironment());

    // Extracting the indexing structures for both graphs
    NestedIndexing leftIdx = EPGMToNestedIndexingTransformation.fromLogicalGraph(left);
    NestedIndexing rightIdx = EPGMToNestedIndexingTransformation.fromGraphCollection(collection);

    // At this step the FlatModel is never used, since I only change the index representation
    IndexingForNesting resultingIndices = operator.with(leftIdx, rightIdx);
    previousComputation = resultingIndices.getPreviousComputation();

    // Converting the result to the standard EPGM model
    return NestedIndexingToEPGMTransformations.toLogicalGraph(resultingIndices,fm);
  }

  @Override
  public DataSet<Hexaplet> getPreviousComputation() {
    return previousComputation;
  }
}
