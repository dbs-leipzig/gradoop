/*
 * Copyright Â© 2014 - 2018 Leipzig University (Database Research Group)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradoop.flink.model.impl.operators.aggregation.functions.min;

import org.gradoop.common.model.impl.pojo.Element;
import org.gradoop.common.model.impl.properties.PropertyValue;
import org.gradoop.common.model.impl.properties.PropertyValueUtils;
import org.gradoop.flink.model.impl.operators.aggregation.functions.BaseAggregateFunction;

/**
 * Superclass of aggregate functions that determine a minimal property value.
 */
public abstract class MinProperty<T extends Element> extends BaseAggregateFunction<T> {

  /**
   * Prefix of the property key generated by {@link MinProperty} aggregate function.
   */
  private static final String PROPERTY_KEY_PREFIX_MIN = "min_";

  /**
   * Constructor.
   *
   * @param propertyKey property key to aggregate
   */
  public MinProperty(String propertyKey) {
    super(propertyKey);
  }

  @Override
  public PropertyValue aggregate(PropertyValue aggregate,
                                 PropertyValue increment) {
    return PropertyValueUtils.Numeric.min(aggregate, increment);
  }

  @Override
  public PropertyValue getIncrement(T element) {
    return element.getPropertyValue(super.getAggregatePropertyKey());
  }

  @Override
  public String getAggregatePropertyKey() {
    return PROPERTY_KEY_PREFIX_MIN + super.getAggregatePropertyKey();
  }
}
